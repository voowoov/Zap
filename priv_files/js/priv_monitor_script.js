/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../cjs/monitor.js":
/*!*************************!*\
  !*** ../cjs/monitor.js ***!
  \*************************/
/***/ (() => {

eval("/////////////////////////////////////////////////////////////////////////////////\r\n//  Make click event listener for each button - Functions in this module\r\n/////////////////////////////////////////////////////////////////////////////////\r\nArray.from(document.getElementsByClassName('monitorFunction')).forEach(el => {\r\n  el.addEventListener('click', () => {\r\n    let fnName = el.innerHTML; // Get the function name from the innerHTML\r\n    if (typeof eval(fnName) === 'function') {\r\n      eval(fnName + '()');\r\n    };\r\n  });\r\n});\r\n/////////////////////////////////////////////////////////////////////////////////\r\n//  Make click event listener for each button - Send a WS command\r\n/////////////////////////////////////////////////////////////////////////////////\r\nArray.from(document.getElementsByClassName('monitorSendCommand')).forEach(el => {\r\n  el.addEventListener('click', () => {\r\n    sendCommand(el.innerHTML);\r\n  });\r\n});\r\n/////////////////////////////////////////////////////////////////////////////////\r\n//  \r\n/////////////////////////////////////////////////////////////////////////////////\r\n\r\nconst commandLog = document.querySelector('#command-log');\r\nconst commandInput = document.querySelector('#command-input');\r\nconst commandSubmit = document.querySelector('#command-submit');\r\n\r\nconst webSocketURL = (window.location.protocol === 'https:' ? 'wss://' : 'ws://') +\r\n  window.location.host + '/monitor/';\r\n// console.log(webSocketURL)\r\n\r\nconst monitorSocket = new WebSocket(webSocketURL);\r\n\r\nmonitorSocket.onmessage = function(e) {\r\n  addLogRes(e.data);\r\n};\r\n\r\nmonitorSocket.onclose = function(e) {\r\n  console.error('Monitor socket closed unexpectedly');\r\n};\r\n\r\nmonitorSocket.onerror = function(event) {\r\n  if (event.code === 1009) {\r\n    alert(\"The message received was too large.\");\r\n  };\r\n};\r\n\r\nlet monitor_last_commands;\r\nlet monitor_last_commands_index = -1;\r\nconst monitor_last_commands_max_length = 10;\r\ncommandInput.onkeydown = function(e) {\r\n  switch (e.key) {\r\n    case \"Enter\":\r\n      e.preventDefault();\r\n      commandSubmit.click();\r\n      break;\r\n    case \"ArrowUp\":\r\n      e.preventDefault();\r\n      monitor_last_commands = JSON.parse(localStorage.getItem('monitor_last_commands'));\r\n      monitor_last_commands_index = Math.min(Math.max(monitor_last_commands_index + 1, -1), monitor_last_commands_max_length - 1);\r\n      commandInput.value = monitor_last_commands_index == -1 ? \"\" : monitor_last_commands[monitor_last_commands_index];\r\n      break;\r\n    case \"ArrowDown\":\r\n      e.preventDefault();\r\n      monitor_last_commands = JSON.parse(localStorage.getItem('monitor_last_commands'));\r\n      monitor_last_commands_index = Math.min(Math.max(monitor_last_commands_index - 1, -1), monitor_last_commands_max_length - 1);\r\n      commandInput.value = monitor_last_commands_index == -1 ? \"\" : monitor_last_commands[monitor_last_commands_index];\r\n      break;\r\n    default:\r\n  };\r\n};\r\n\r\ncommandSubmit.onclick = function(e) {\r\n  if (commandInput.value.length > 0) {\r\n    monitor_last_commands = JSON.parse(localStorage.getItem('monitor_last_commands'));\r\n    monitor_last_commands = monitor_last_commands.filter(item => item !== commandInput.value);\r\n    monitor_last_commands.unshift(commandInput.value);\r\n    if (monitor_last_commands.length > monitor_last_commands_max_length) { monitor_last_commands.splice(monitor_last_commands_max_length); };\r\n    localStorage.setItem('monitor_last_commands', JSON.stringify(monitor_last_commands));\r\n    monitor_last_commands_index = -1;\r\n    sendCommand(commandInput.value);\r\n    commandInput.value = '';\r\n  };\r\n};\r\n\r\nfunction addLogRes(log) {\r\n  commandLog.value += ('r: ' + log + '\\n');\r\n  commandLog.scrollTop = commandLog.scrollHeight;\r\n};\r\n\r\nfunction addComlog(log) {\r\n  commandLog.value += (log + '\\n');\r\n  commandLog.scrollTop = commandLog.scrollHeight;\r\n};\r\n\r\nfunction sendCommand(command) {\r\n  if (command.length > 0) {\r\n    monitorSocket.send(command);\r\n    addComlog(command);\r\n  };\r\n};\r\n\r\nfunction sendPacketBurstJS() {\r\n  let packetSize = parseInt(document.getElementById(\"wstestsize\").value);\r\n  let repetitions = parseInt(document.getElementById(\"wstestrepetitions\").value);\r\n  let delay = parseInt(document.getElementById(\"wstestdelay\").value);\r\n  const str1 = 'x'.repeat(packetSize);\r\n  console.log('sending ' + repetitions + ' packets of size ' + packetSize)\r\n  let x = 0;\r\n  const intervalId = setInterval(() => {\r\n    if (x === repetitions) {\r\n      clearInterval(intervalId);\r\n      return;\r\n    };\r\n    console.log(x);\r\n    monitorSocket.send(str1);\r\n    x++;\r\n  }, delay);\r\n};\r\n\r\nfunction connectAndDisconnectJS() {\r\n  let repetitions = parseInt(document.getElementById(\"wstestrepetitions\").value);\r\n  let delay = parseInt(document.getElementById(\"wstestdelay\").value);\r\n  let count = 0;\r\n  let monitorSocket1;\r\n  const intervalId = setInterval(() => {\r\n    if (count % 2 === 0) {\r\n      // First command\r\n      console.log(\"Connect\");\r\n      monitorSocket1 = new WebSocket(webSocketURL);\r\n    } else {\r\n      // Second command\r\n      console.log(\"Disconnect\");\r\n      monitorSocket1.close();\r\n    };\r\n    count++;\r\n    if (count === 2 * repetitions) {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, delay);\r\n};\r\n\r\nfunction sendBinaryMessage() {\r\n  // Create some binary data.\r\n  let array = new Uint8Array([1, 2, 3, 4, 5]);\r\n  // Send the binary data.\r\n  monitorSocket.send(array.buffer);\r\n};\r\n\r\nwindow.addEventListener('beforeunload', function(event) {\r\n  monitorSocket.close();\r\n});\r\n\r\n/////////////////////////////////////////////////////////////////////////////////\r\n// Django in-Template varibles and Ajax\r\n/////////////////////////////////////////////////////////////////////////////////\r\nfunction showMyObjectList() {\r\n  let myURLsendRequest = JSON.parse(document.getElementById('myURLsendRequest').textContent);\r\n  let myObjectList = JSON.parse(document.getElementById('myObjectList').textContent)\r\n  console.log(\"url to ajax view: \", myURLsendRequest)\r\n  console.log(\"objects: \", myObjectList)\r\n}\r\n////// fetch data on server\r\nfunction sendAjaxRequest() {\r\n  let myURLsendRequest = JSON.parse(document.getElementById('myURLsendRequest').textContent);\r\n  let csrf_token = document.querySelector('input[name=\"csrfmiddlewaretoken\"]').value;\r\n  let formData = new FormData();\r\n  formData.append(\"csrfmiddlewaretoken\", csrf_token);\r\n  formData.append(\"message\", \"This is a fetch from js\");\r\n  fetch(myURLsendRequest, {\r\n      method: 'POST',\r\n      headers: { 'X-Requested-With': 'XMLHttpRequest' },\r\n      body: formData,\r\n    }).then(response => response.json())\r\n    .then(response => {\r\n      console.log(\"json received: \", response)\r\n    });\r\n};\n\n//# sourceURL=webpack://zap/../cjs/monitor.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["../cjs/monitor.js"]();
/******/ 	
/******/ })()
;