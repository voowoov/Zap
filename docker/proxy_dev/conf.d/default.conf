proxy_http_version 1.1;


##### Limitting
limit_req_zone $binary_remote_addr zone=main_req:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=wsi_req:10m rate=1r/s;
limit_req_status 429;
limit_conn_zone $binary_remote_addr zone=conn_perip:10m;
# proxy / client
client_max_body_size 100k;
client_header_timeout 10;   # only out of server and location blocks # prevents slowly giving the header attack
client_body_timeout 10; # in sec
limit_req zone=main_req burst=40 delay=20;
limit_conn conn_perip 5;
limit_rate 500k;  # per connection (100k = 100kB/s) limit of transfer to the client (not from)

##### Cache storage
# proxy_cache_path /var/cache/nginx
#                   keys_zone=NginxCache:20m
#                   inactive=60m
#                   levels=1:2
#                   max_size=10g
#                   use_temp_path=off;
 
upstream zap {
  server web:8000;
#   server web:8001;
}
server {
  listen 80;

  access_log /var/log/nginx/access.log;

  # location /static/ {
  #   alias /home/app/static/;
    # gzip_static always;
  # }

  location /media/ {
    alias /home/app/media/;
  }

  location /media_private/ {
    internal;
    alias /home/app/priv_files/;
  }

  # location /flower54321/ {
  #   proxy_pass http://flower:8888;  # flower, no trailing slash
  #   proxy_set_header X-Real-IP $remote_addr;
  #   proxy_set_header Host $host;
  #   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  # }

  # location /pgadmin54321/ {
  #   proxy_set_header X-Script-Name /pgadmin54321; # this informs pgadmin of the parent url
  #   proxy_pass http://pgadmin:5050/;   # pgadmin, with trailing slash
  #   proxy_set_header Host $host;
  #   proxy_set_header X-Real-IP $remote_addr;
  #   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  # }

  # location /duplicati54321/ {
  #   proxy_set_header X-Script-Name /duplicati54321; # this informs pgadmin of the parent url
  #   proxy_pass http://duplicati:8200/; # duplicati, with trailing slash
  #   proxy_set_header Host $host;
  #   proxy_set_header X-Real-IP $remote_addr;
  #   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  # }

  # location = /favicon.ico { access_log off; log_not_found off; }

  location /wsi {
    limit_conn conn_perip 3;    # limit_conn limits the number of simultaneous websocket connections per IP.
    limit_req zone=wsi_req burst=5 delay=3;   
                                # limit_req works for limiting the frequency of websocket disconnect/connects per IP 
                                #  but not the frequency of messages through the connection.
                                # To limit message frequency, django may keep track of the datetime of each message 
                                #  of a every connection and close the connection if the message frequency is too high.
                                # To limit the size of messages, nginx wont do it, instead it is done in Autobahn
                                #  which is what Daphne is based on for websockets, the protocol.py is bindmount
                                #  and the following variables are set: maxFramePayloadSize, maxMessagePayloadSize.
    proxy_set_header Upgrade $http_upgrade;   # this is necessary for websockets
    proxy_set_header Connection Upgrade;      # this is necessary for websockets
    proxy_pass http://zap;
    # proxy_read_timeout 200s;                # default 60s, for channels keeping connexion alive
  }

  location /monitor {
    limit_conn conn_perip 1;
    limit_req zone=main_req burst=40;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection Upgrade;
    proxy_pass http://zap;
  }

  location / {
    # client to proxy limiting
    limit_conn conn_perip 5;
    limit_req zone=main_req burst=40;
    client_max_body_size 100k;
    # proxy / server  cannot be used with websockets
    proxy_read_timeout 10;
    proxy_connect_timeout 10;
    proxy_send_timeout 10;
    # proxy to client limiting
    limit_rate 500k;  # per connection (100k = 100kB/s) limit of transfer to the client (not from)

    proxy_pass http://zap;
    ##### forward the host to django
    proxy_set_header Host $host;
    ##### forward the client IP address instead of Nginx IP address
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    
    ############## Cache #############
    ############## To see http header of page, go in the broser dev: Network / page link (left) / Header tab
    proxy_no_cache 1;
    ##### Browser's cache system (Cache-Control)
    # expires 2d;
    # add_header Cache-Control "public, no-transform";  
    ##### Nginx cache system (proxy cache)
    # proxy_ignore_headers Set-Cookie;  # otherwise not cached with cookies (sessionid, ...)
    # proxy_ignore_headers Vary;  # otherwise wont cache for different users (default Django)
    # proxy_ignore_headers Cache-Control;
    # proxy_cache_bypass $cookie_sessionid;  # bypass cache when user is logged-in (?)
    # proxy_cache_valid any 30m;
    # proxy_cache NginxCache;
    # # proxy_cache_min_uses 5;   # min. visits before becoming cache
    # proxy_cache_methods GET;
    # proxy_cache_valid 200 10m;
    # proxy_cache_valid 404 5m;
    # add_header X-Proxy-Cache $upstream_cache_status;    # instrumenting cache

    # ### adding this when using subdomains (not sure really)
    # add_header "Access-Control-Allow-Origin" '*';
    # add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD, PATCH, DELETE, PUT";
    # add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept, X-CSRF-Token";
  }

}

